<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automation | Theo Sanderson</title><link>/category/automation/</link><atom:link href="/category/automation/index.xml" rel="self" type="application/rss+xml"/><description>Automation</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 05 Jan 2019 17:38:35 +0000</lastBuildDate><image><url>/images/icon_hu141e5746c4390abcaff97a6bd8371d9c_4466_512x512_fill_lanczos_center_2.png</url><title>Automation</title><link>/category/automation/</link></image><item><title>eMotion 5075 teardown</title><link>/blog/2019/01/05/emotion-5075-teardown/</link><pubDate>Sat, 05 Jan 2019 17:38:35 +0000</pubDate><guid>/blog/2019/01/05/emotion-5075-teardown/</guid><description>&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/epmotion.jpg" alt="">
In my PhD lab we had an epMotion 5075 pipetting robot. I had a like/hate relationship with this machine. Like: it’s an impressive, precision-engineered, piece of hardware. Hate: the software is appalling. Writing protocols for it was slow, frustrating and generally awful, and there was a general lack of flexibility in what one could make it do.&lt;/p>
&lt;p>Recently I heard that the lab was having a clear out, including disposing of this (pricey when purchased) robot and I asked if I could adopt it in preference to the scrapheap, which I was kindly allowed to. I’m not in a wet-lab at the moment so for now it will live in a garage, but I did want to have a peek inside to have a better understanding of how it works, and to work out whether it would be possible to customise it to be more flexible.&lt;/p>
&lt;p>If I were buying my own scientific hardware I would always go for the upstart companies like &lt;a href="http://opentrons.com/" target="_blank" rel="noopener">OpenTrons&lt;/a> and &lt;a href="https://incuvers.com/" target="_blank" rel="noopener">Incuvers&lt;/a> which tell you how their hardware works and allow you to do whatever you want with it. With the epMotion, by contrast, if you want to use new labware you have to send a physical version of it to the company which they measure to generate a proprietary calibration file.&lt;/p>
&lt;p>I was given some hope that it might be possible to customise the robot from this video, in which someone has replaced all the electronics of the robot with a standard board for a CNC machine:&lt;/p>
&lt;p>&lt;iframe src="https://www.youtube.com/embed/IDlZ_FIUgjM" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen">&lt;/iframe>&lt;/p>
&lt;p>But other than that I could find very little on the internet about what is inside these robots. I think that’s a shame, and now I have one at my disposal, without a warranty. So here is a run-down of what happens when you take it apart, in case it is useful to anyone in a similar position.&lt;/p>
&lt;p>&lt;strong>First steps&lt;/strong>&lt;/p>
&lt;p>The back panels come off very easily with a hex-key and expose the computer that runs the machine. This runs some version of Windows, maybe Windows CE. It has USB and ethernet ports although to my knowledge with my version of this robot these can’t be used for anything useful. In general I doubt there is any easy way to make this computer do anything other than what Eppendorf has programmed it to do, without access to the underlying source code.&lt;/p>
&lt;p>Removing the top required in my case removing a little bit of double sided tape at either side, in addition to two hex-key bolts.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/epmotionteardown1.jpg" alt="">&lt;/p>
&lt;p>There is a heavy-duty belt for the X axis with a big stepper motor.  My robot had been essentially unused for several years and the rail over which the X-carriage runs had become covered with a sticky substance. This caused the motors to stall mid-run, but cleaning them off with some alcohol resolved this issue.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/P1010610-1200x1600.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-321" class="wp-caption-text">The computer that is the brains of the operation &amp;#8211; unfortunately unlikely to be easily repurposable.&lt;/figcaption>&lt;/figure>
&lt;p>&lt;strong>Basics&lt;/strong>&lt;/p>
&lt;p>Each of the X, Y and Z axes is controlled by a stepper motor (the X-axis one is &lt;a href="https://catalog.orientalmotor.com/item/all-categories/tegories-pk-series-2-phase-stepping-motors-legacy-/pk266-03a" target="_blank" rel="noopener">this&lt;/a>). They each have optical endstops with 4 wires. In the video above these endstops have been replaced with mechanical switches but it really should be possible to use them as-is.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/P1010626-e1546707506491-1200x1600.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-322" class="wp-caption-text">X-belt and optical end-stop&lt;/figcaption>&lt;/figure>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/P1010690-1200x900.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-317" class="wp-caption-text">Y-axis stepper motor, belt, and optical end-stop.&lt;/figcaption>&lt;/figure>
&lt;p>&lt;strong>Cabling&lt;/strong>&lt;/p>
&lt;p>One of the challenges of making a many-axis robot is that signals have to be carried to each successive axis, all of which are connected together. So flexible cabling is needed -but at the same time it has to not get in the way or fall into the samples. In the case of the epMotion this is carried out with ribbon cables like this:&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/ribboncable-1200x900.jpg" alt="">&lt;/p>
&lt;p>But it quickly becomes apparent that this cable doesn’t have enough wires to be simply directly connected at the other end to stepper motors / endstops / etc. Instead it seems that this is some sort of serial cable that carries data signals to a series of other microprocessors, one on the robot’s pipetting arm, and one for each of the Y and Z axes, which then interface with the Y motor, Z motor, the tool locking motor, the pipetting motor, the tip-ejecting actuator, and the range-detector.&lt;/p>
&lt;p>If you want to hack this thing you’ll have to decide whether you want to have to make and mount 4 separate pieces of control hardware, or to replace the cabling with a much thicker set of wires.&lt;/p>
&lt;p>&lt;strong>Pipetting arm&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/pipettearm2-1200x872.jpg" alt="">&lt;/p>
&lt;p>Lurking under the metal cover of the tool arm is a profusion of electronics. There’s a lot to do. An (infrared?) sensor to measure distance, and actuation of grabbing a tool, identifying it, pipetting up and down, and ejecting a tip.&lt;/p>
&lt;p>&lt;strong>Selecting/using tools&lt;/strong>&lt;/p>
&lt;p>One of the very impressive things about the epMotion robot is its ability to change tools during operation. It can choose from a variety of single channel and multichannel pipettes, and even a plate gripper.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/P1010677-1200x900.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-326" class="wp-caption-text">Tools&lt;/figcaption>
&lt;p>How does this process work?&lt;/p>
&lt;p>The tool arm has two coaxial motors. One is, I believe, a simple DC motor with a very low gearing. It rotates a bit of metal internal to the arm which causes it to firmly grip whichever tool it is currently over. I’m not quite sure how the robot knows when this rotation is finished. My suspicion is that it detects the change in current flowing through the motor when the motor stalls at the end. Certainly if you disconnect this motor, the robot is able to detect that ‘the engine is not responding’, and informs you so.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/insidetoolarm-1200x900.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-325" class="wp-caption-text">Looking up at the inside of the tool gripper to see how it works.&lt;/figcaption>
&lt;p>When one examines the pipettes themselves one notices they have electrical contacts, but these are simply used to tell the robot which tool is in what place. The pipettes are in fact mechanical rather than electronic devices. They all have the same rotatable top-piece, and as this is spun by a stepper motor in the tool arm they aspirate/dispense liquid (or in the case of the gripper, grab and release). As this piece is rotated the tool begins to extend a rod out from it. Inside the tool-gripper this rod must make contact with a switch, and this is used to “home” the pipette to ensure the robot knows the position of the plunger.&lt;/p>
&lt;p>&lt;img src="/post/archive_posts/old_wp_images/wp-content/uploads/2019/01/P1010651-1200x900.jpg" alt="">&lt;/p>
&lt;figcaption id="caption-attachment-327" class="wp-caption-text">Homed tool with thin rod extended to make contact with switch. Electrical contacts for tool ID visible to the right.&lt;/figcaption>&lt;/figure>
&lt;p>&lt;strong>Prospects for customisation&lt;/strong>&lt;/p>
&lt;p>I’m going to pause my hardware work here, because it isn’t yet clear exactly what the application of the robot will be for me and I don’t want to destroy any necessary functionality.&lt;/p>
&lt;p>If I had continued I would have one way or another tried to marry up the epMotion hardware with the open-source &lt;a href="https://github.com/Opentrons" target="_blank" rel="noopener">OpenTrons robot-control software&lt;/a>. This basically means adapting the hardware such that one knows how to control it and then writing a custom driver for the OpenTrons software.&lt;/p>
&lt;p>I do think this is completely achievable. The video above already shows how 3-axis control is possible, using a standard CNC board. Controlling aspirate/dispense as a fourth axis should be similarly simple. If my understanding of how the tool interlock works is correct than that also wouldn’t be too challenging – one would just need to measure the current flowing through the motor. An even simpler strategy would just be to keep one tool locked onto the machine.&lt;/p>
&lt;p>One decision one would have to make would be whether to have a single control board and have lots and lots of wires running to the tool-arm, or to use the existing ribbon cables and have a separate controller on the tool arm controlled over serial. I suspect the latter might be the better approach.&lt;/p>
&lt;p>More generally, if I do this I will have to consider whether I want to be limited to expensive epMotion robot tips, the only ones compatible with any of these tools. I suspect the answer is no. In that case I might end up bolting an &lt;a href="http://opentrons.com/pipettes" target="_blank" rel="noopener">OT-2 electronic pipette&lt;/a> to the pipetting arm, though this again loses the advantages of tool-changing. Or maybe I’ll go with something completely different like a vacuum pump and a peristaltic pump – we’ll see.&lt;/p>
&lt;p>In general none of this looks trivial, and one is almost certainly better off just buying an inexpensive &lt;a href="http://opentrons.com/ot-2" target="_blank" rel="noopener">OT2&lt;/a>. Still, it’s nice to have a better understanding of what is going on inside this intricately engineered machine.&lt;/p>
&lt;p> &lt;/p>
&lt;p>&lt;strong>Update:&lt;/strong>&lt;/p>
&lt;p>It has just occurred to me (another useful reason for writing things down) that there may be an easier and less invasive way to get control of this thing. If one can reverse engineer the serial control that the computer uses to control the Y-axis, Z-axis, tool interlock, aspiration tip ejection (and distance measuring) then one can get control of all of these without messing with their hardware. It seems possible that this could be achieved relatively simply (if they are sent in a text-based format) and when I have access to the machine again in 6 months time I will investigate. The 8 leads in the ribbon cable &lt;em>could&lt;/em> be: V+, GND, Y-out, Y-in, Z-out, Z-in, pipette-out, pipette-in.&lt;/p></description></item><item><title>Saving 99.5%: automating a manual microscope with a 3D printed adapter</title><link>/blog/2018/02/01/save-99-5-upgrading-a-manual-microscope-with-an-automated-stage-for-60/</link><pubDate>Thu, 01 Feb 2018 14:30:41 +0000</pubDate><guid>/blog/2018/02/01/save-99-5-upgrading-a-manual-microscope-with-an-automated-stage-for-60/</guid><description>&lt;p>**TL;DR: **Some 3D-printing hackery can create an automated microscope stage from a manual stage for ~0.5% of the cost from the manufacturer.&lt;/p>
&lt;p>&lt;img class="alignnone size-full wp-image-80" src="/post/archive_posts/old_wp_images/wp-content/uploads/2018/01/giphy3.gif" alt="" width="480" height="270" />&lt;/p>
&lt;hr>
&lt;p>I have always wanted access to a microscope with an automated stage. The ability to scan an entire slide/plate for a cell of interest seems to unlock a wealth of new possibilities.&lt;/p>
&lt;p>Sadly, these systems cost quite a bit. The lab I work in now has a Leica DMi8 microscope with automated movement in Z. But XY movement is (on our model) still manual. It is possible to purchase an automated XY stage for this microscope, but the list-price quote is around £12,000 (including stage, and control hardware and software).&lt;/p>
&lt;p>I’m not going to argue that this price is unreasonable. I am sure that the manufacturers of scientific equipment spend a lot of time and money innovating, and that money has to be made back by selling devices which have relatively small production runs. Nevertheless, the result is that the costs of kit that makes it to market are fairly staggering – and this prevents someone like me from being able to play around with an automated stage.&lt;/p>
&lt;p>But I still wanted to experiment with an automated stage! So I wondered how easy this would be to do myself. After all, we have a manual stage, and we move it by rotating two knobs. Couldn’t I just get motors to turn those instead of doing it with my hand?&lt;/p>
&lt;p>As I thought this through further I realised it was slightly complicated than this. Firstly, the knobs are co-axial, making them rather harder to deal with than would be two separate shafts. And secondly, as you rotate the X-knob, the shaft moves in X.&lt;/p>
&lt;p>&lt;img class="alignnone wp-image-62 size-full" src="/post/archive_posts/old_wp_images/wp-content/uploads/2018/01/ezgif-1-2c888ba693.gif" alt="" width="600" height="338" />&lt;/p>
&lt;p>So the motors need to be able to move with it. But they also need to be to rotate and exert a twisting force on the knob – so they need to move linearly but be locked in one orientation.&lt;/p>
&lt;p>&lt;strong>Hardware: 3D printed pieces, 2 stepper motors and a RAMPS controller&lt;/strong>&lt;/p>
&lt;p>I made a quick design in OpenSCAD&lt;/p>
&lt;p>&lt;img class="alignnone size-medium wp-image-64" src="/post/archive_posts/old_wp_images/wp-content/uploads/2018/01/design-300x289.png" alt="" width="300" height="289" srcset="/post/archive_posts/old_wp_images/wp-content/uploads/2018/01/design-300x289.png 300w, /post/archive_posts/old_wp_images/wp-content/uploads/2018/01/design.png 500w" sizes="(max-width: 300px) 85vw, 300px" />&lt;/p>
&lt;p>Basically the first knob,which controls movement in Y, is simply connected to the mechanism by a (red) sleeve which connects to a motor below. The knob above, which controls movement in X, is placed inside a (blue) sleeve which covers it in a gear. That gear is turned by a (turquoise) gear turned by a second motor. Both motors are mounted on a (transparent) piece which also connects them to a LM6LUU linear bearing which allows them to slide but keeps their orientation constant.&lt;/p>
&lt;p>I printed out these 3 pieces – then tweaked the dimensions a little to be more snug on the knobs and printed them again. The final STL files, and the SCAD file that generated them are available on &lt;a href="https://www.thingiverse.com/thing:2778053" target="_blank" rel="noopener">Thingiverse&lt;/a>.&lt;/p>
&lt;p>To control it I connected the steppers to a trusty RAMPS 3D printer controller. These cost £30 with a screen and a rocker controller (the Leica hardware to control a stage is ~£3k). Since the 3D printer controller is also all set up to control the temperature of a hot-end and a heated bed, if you want to add warm stage down the line this might be ideal.&lt;/p>
&lt;p>Initial tests controlling the position using the system using the RAMPS controller went well, and let me calibrate the number of steps per micrometer.&lt;/p>
&lt;p>&lt;iframe src="https://www.youtube.com/embed/qiW8ZmzKFb0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen">&lt;/iframe>&lt;/p>
&lt;h3 id="software-micromanager">Software: MicroManager&lt;/h3>
&lt;p>Regrettably, the Leica software isn’t going to allow you to easily hook it up to an Arduino-based controller. But, as ever, open-source software comes to the rescue. &lt;a href="https://micro-manager.org" target="_blank" rel="noopener">Micro-Manager&lt;/a> is a very advanced ImageJ plugin that can connect to the Leica camera, and to the microscope itself to control filter cube positions, Z-focusing, etc.&lt;/p>
&lt;p>Don’t expect quite the user-friendliness of Leica software from Micro-Manager, but _do _expect a wealth of packages to perform common operations in automated-microscopy (Leica charges ~£2.5k for the software to revisit a position multiple times – which was included in the quote given above).&lt;/p>
&lt;p>Theoretically, MicroManager &lt;em>even&lt;/em> allows you to control XY position using a RAMPS controller – someone has already written a package for exactly this board. This step, which should have been trivial, was actually the most complicated. The device adapter is designed to ask the RAMPS controller for its version, and somehow I could never make my board submit a response that the software was happy with. I had to download the MicroManager source and remove the code that checked the version. Successfully setting up the build environment for Windows took an age. Do get in touch if you have a similar project and want the DLL I built [update: DLL &lt;a href="/post/archive_posts/old_wp_images/wp-content/mmgr_dal_RAMPS.dll">here&lt;/a>, I offer no guarantees at all that it will work. This is an x64 build which will only work with a &lt;a href="http://valelab4.ucsf.edu/~MM/nightlyBuilds/1.4/Windows/MMSetup_64bit_1.4.23_20180131.exe" target="_blank" rel="noopener">recent nightly build&lt;/a>] [update 2: &lt;a href="https://twitter.com/nvladimus/status/1050047856135073792" target="_blank" rel="noopener">Nikita Vladimirov&lt;/a> has followed up on this and released the &lt;a href="https://github.com/nvladimus/micro-manager" target="_blank" rel="noopener">changes&lt;/a> he had to make to MicroManager]. Anyway, to cut a long story short I got MicroManager to talk to the RAMPS board successfully.&lt;/p>
&lt;h3 id="testing-by-making-a-100x-oil-immersion-slide-scanner">Testing by making a 100X oil immersion slide scanner&lt;/h3>
&lt;p>Now to put it into practice.&lt;/p>
&lt;p>I wrote a Beanshell script to scan a slide in X and Y and capture images. In this case I captured images in a grid 40 microscope images wide by 30 microscope images high, for a total of 1200 images.&lt;/p>
&lt;p>&lt;iframe src="https://www.youtube.com/embed/hqaQOWkytuY" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen">&lt;/iframe>&lt;/p>
&lt;p>This took a few minutes – try doing that by hand.. Then I stitched them together with the &lt;a href="https://www.nature.com/articles/s41598-017-04567-y" target="_blank" rel="noopener">MIST plugin&lt;/a>. The result is a 27,000 x 12,000 pixel image, featuring a whole lot of red blood cells. You can zoom in on the version below. This was taken with a 100X oil immersion objective, at which magnification the smallest motion of the stage is a substantial fraction of the image, but still allows enough overlap for stitching.&lt;/p>
&lt;p>&lt;script src="https://scripts.sirv.com/sirv.js">&lt;/script>&lt;/p>
&lt;div class="Sirv" style="height: 400px; width: 100%;" data-effect="zoom">&lt;img data-src="https://smoncett.sirv.com/huge2%20copy.jpg" />&lt;/div>
&lt;p>Fun! Still a bit more experimenting to do, but I’m hoping to get this acquiring tagged proteins from 96-well plates.&lt;/p>
&lt;p>&lt;em>Caveat for anyone who tries to implement this: obviously be very careful not to create significant non-twisting forces on the coaxial knobs – you don’t want to damage your stage and ruin the alignment.&lt;/em>&lt;/p></description></item></channel></rss>